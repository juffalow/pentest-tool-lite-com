import Pentest from 'pentest-tool-lite/src/Pentest';
import database from '../database';
import logger from '../logger';
import { countStatuses } from '../utils/functions';

const worker = async (id: number): Promise<{isDone: boolean}> => {
  await database.table('test').update({ status: 'running' }).where('id', id);

  const test = await database.select().from('test').where('id', id).first();

  logger.info('Starting new pentest!', { id: test.id, url: test.url });

  try {
    const pentest = new Pentest();
    const result = await pentest.run(test.url);

    const successCount = countStatuses(result.security, 'SUCCESS') + countStatuses(result.html, 'SUCCESS') + countStatuses(result.seo, 'SUCCESS') + countStatuses(result.wordpress, 'SUCCESS');
    const warningCount = countStatuses(result.security, 'WARNING') + countStatuses(result.html, 'WARNING') + countStatuses(result.seo, 'WARNING') + countStatuses(result.wordpress, 'WARNING');
    const errorCount = countStatuses(result.security, 'ERROR') + countStatuses(result.html, 'ERROR') + countStatuses(result.seo, 'ERROR') + countStatuses(result.wordpress, 'ERROR');
  
    await database.table('test').update({ result: JSON.stringify(result), status: 'done', isDone: '1', successCount, warningCount, errorCount }).where('id', id);
  } catch (error) {
    logger.error('Pentest run failed!', { message: error.message, stack: error.stack });
    await database.table('test').update({ status: 'error', isDone: '1' }).where('id', id);
  }

  return { isDone: true };
};

export default worker;
