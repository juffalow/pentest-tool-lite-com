import { DynamoDBClient, GetItemCommand, PutItemCommand, UpdateItemCommand } from '@aws-sdk/client-dynamodb';
import { marshall, unmarshall } from '@aws-sdk/util-dynamodb';
import { v4 as uuidv4 } from 'uuid';
import logger from '../../logger';

class DynamoDBRepository implements TestRepository {
  constructor(
    protected dynamoDB: DynamoDBClient
  ) {}

  public async get(id: ID): Promise<Test> {
    logger.debug(`${this.constructor.name}.get`, { id });

    const command = new GetItemCommand({
      TableName: 'pentest-tool-lite',
      Key: {
        id: {
          S: id,
        }
      }
    });
  
    const result = await this.dynamoDB.send(command);

    const item = unmarshall(result.Item);

    return item as Test;
  }

  public async create(url: string, status = 'waiting'): Promise<Test> {
    logger.debug(`${this.constructor.name}.create`, { url, status });

    const item = {
      id: uuidv4(),
      url,
      status,
      result: '{}',
      createdAt: new Date().toISOString(),
      successCount: 0,
      warningCount: 0,
      errorCount: 0,
    }

    const command = new PutItemCommand({
      TableName: 'pentest-tool-lite',
      Item: marshall(item),
    });

    const result = await this.dynamoDB.send(command);

    logger.debug('result', result);

    return item;
  }

  public async update(id: ID, status: string, result: unknown, successCount: number, warningCount: number, errorCount: number): Promise<Test> {
    logger.debug(`${this.constructor.name}.update`, { id, status, result, successCount, warningCount, errorCount });

    const command = new UpdateItemCommand({
      TableName: 'pentest-tool-lite',
      Key: {
        id: {
          S: id,
        }
      },
      UpdateExpression: 'SET #status = :status, #result = :result, successCount = :successCount, warningCount = :warningCount, errorCount = :errorCount',
      ExpressionAttributeNames: {
        '#status': 'status',
        '#result': 'result',
      },
      ExpressionAttributeValues: {
        ':status': {
          S: status,
        },
        ':result': {
          S: JSON.stringify(result),
        },
        ':successCount': {
          N: successCount.toString(),
        },
        ':warningCount': {
          N: warningCount.toString(),
        },
        ':errorCount': {
          N: errorCount.toString(),
        },
      }
    });

    const response = await this.dynamoDB.send(command);

    logger.info('result', response);

    const item = await this.get(id);

    return item;
  }
}

export default DynamoDBRepository;
