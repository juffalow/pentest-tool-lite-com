import { LRUCache } from 'lru-cache';
import logger from '../../logger';

class CacheRepository implements TestRepository{
  constructor(
    protected repository: TestRepository,
    protected cache: LRUCache<ID, Test>,
  ) {}

  public async get(id: ID): Promise<Test> {
    logger.debug(`${this.constructor.name}.get`, { id });

    if (!this.cache.has(id)) {
      const item = await this.repository.get(id);

      this.cache.set(id, item, { ttl: item.status === 'running' ? 1000 : 0 });
    }

    return this.cache.get(id);
  }

  public async create(url: string, status = 'waiting'): Promise<Test> {
    logger.debug(`${this.constructor.name}.create`, { url, status });

    const item = await this.repository.create(url, status);

    this.cache.set(item.id, item, { ttl: 1000});

    return item;
  }

  public async update(id: ID, status: string, result: unknown, successCount: number, warningCount: number, errorCount: number): Promise<Test> {
    logger.debug(`${this.constructor.name}.update`, { id, status, result, successCount, warningCount, errorCount });

    this.cache.delete(id);

    const item = await this.repository.update(id, status, result, successCount, warningCount, errorCount);

    this.cache.set(id, item);

    return item;
  }
}

export default CacheRepository;
