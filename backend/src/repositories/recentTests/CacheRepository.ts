import { LRUCache } from 'lru-cache';
import logger from '../../logger';

class CacheRepository implements RecentTestsRepository {
  constructor(
    protected repository: RecentTestsRepository,
    protected cache: LRUCache<string, RecentTest[]>,
  ) {}

  public async get(): Promise<RecentTest[]> {
    logger.debug(`${this.constructor.name}.get`);

    if (!this.cache.has('recent-tests')) {
      const recentTests = await this.repository.get();

      this.cache.set('recent-tests', recentTests);
    }

    return this.cache.get('recent-tests');
  }

  public async update(recentTests: RecentTest[], forceStore = false): Promise<RecentTest[]> {
    logger.debug(`${this.constructor.name}.update`, { recentTests });

    this.cache.set('recent-tests', recentTests);

    if (forceStore) await this.repository.update(recentTests);

    return recentTests;
  }
}

export default CacheRepository;
