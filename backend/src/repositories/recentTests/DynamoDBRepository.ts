import { DynamoDBClient, GetItemCommand, PutItemCommand, UpdateItemCommand } from '@aws-sdk/client-dynamodb';
import { marshall, unmarshall } from '@aws-sdk/util-dynamodb';
import logger from '../../logger';

class DynamoDBRepository implements RecentTestsRepository {
  constructor(
    protected dynamoDB: DynamoDBClient
  ) {}

  public async get(): Promise<RecentTest[]> {
    logger.debug(`${this.constructor.name}.get`);

    const command = new GetItemCommand({
      TableName: 'pentest-tool-lite',
      Key: {
        id: {
          S: 'recent-tests',
        }
      }
    });
  
    try {
      const result = await this.dynamoDB.send(command);

      const item = unmarshall(result.Item);

      return item.recentTests;
    } catch (error) {
      logger.error('Error while getting recent tests from DynamoDB!', { message: error.message, stack: error.stack });

      await this.create();

      return [];
    }
  }

  protected async create(): Promise<void> {
    logger.debug(`${this.constructor.name}.create`);

    const command = new PutItemCommand({
      TableName: 'pentest-tool-lite',
      Item: {
        id: {
          S: 'recent-tests',
        },
        recentTests: {
          L: [],
        },
      }
    });

    await this.dynamoDB.send(command);
  }

  public async update(recentTests: { id: ID, url: string, status: string, successCount: number, warningCount: number, errorCount: number }[]): Promise<{ id: ID, url: string, status: string, successCount: number, warningCount: number, errorCount: number }[]> {
    logger.debug(`${this.constructor.name}.update`, { recentTests });

    const command = new UpdateItemCommand({
      TableName: 'pentest-tool-lite',
      Key: {
        id: {
          S: 'recent-tests',
        }
      },
      UpdateExpression: 'SET recentTests = :recentTests',
      ExpressionAttributeValues: {
        ':recentTests': {
          L: marshall(recentTests),
        },
      }
    });

    const response = await this.dynamoDB.send(command);

    logger.info('result', response);

    const item = await this.get();

    return item;
  }
}

export default DynamoDBRepository;
