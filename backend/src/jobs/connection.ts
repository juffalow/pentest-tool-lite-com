import Redis from 'ioredis';
import config from '../config';
import logger from '../logger';

let client = null;
let subscriber = null;

const getBullOptions = () => {
  let connection = null;

  if ('password' in config.cache.connection && config.cache.connection.password !== '') {
    connection = `rediss://${config.cache.connection.username}:${config.cache.connection.password}@${config.cache.connection.host}:${config.cache.connection.port}`;
  } else {
    connection = `redis://${config.cache.connection.host}:${config.cache.connection.port}`;
  }

  return {
    createClient: function (type: string, options: any) {
      switch (type) {
        case 'client':
          if (client === null) {
            client = new Redis(connection);
            client.on('connect', () => {
              logger.info('Redis connected!');
            });
            client.on('error', (error) => {
              logger.error('Cannot connect to Redis!', { error });
            });
          }

          return client;
        case 'subscriber':
          if (subscriber === null) {
            subscriber = new Redis(connection);
            subscriber.on('connect', () => {
              logger.info('Redis connected!');
            });
            subscriber.on('error', (error) => {
              logger.error('Cannot connect to Redis!', { error });
            });
          }

          return subscriber;
        default:
          return new Redis(connection, { ...options });
      }
    }
  }
}

export { getBullOptions };
