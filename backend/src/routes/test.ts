import express from 'express';
import Pentest from 'pentest-tool-lite/src/Pentest';
import database from '../database';
import logger from '../logger';
import aws from '../services/aws';
import config from '../config';
import { isValidUrl, countStatuses } from '../utils/functions';

const router = express.Router();

router.post('/', async (req, res) => {
  const body = req.body;

  if (!('url' in body)) {
    return res.status(400).json({
      error: {
        message: 'Field URL is missing!',
      },
    });
  }

  if (!isValidUrl(body.url)) {
    return res.status(400).json({
      error: {
        message: 'URL address is not valid!',
      },
    });
  }

  logger.debug('New pentest requested!', { url: body.url });

  const count = await database.select().count({ count: '*' }).from('test').where('createdAt', '>=', database.raw('NOW() - INTERVAL 15 MINUTE')).first().then(result => result.count);

  if (count > 15) {
    logger.error('Queue is full!', { count });
    return res.status(400).json({
      error: {
        message: 'Cannot run more pentests! Please wait for a while and try again.',
      },
    });
  }

  const id = await database.insert({
    url: body.url,
  })
    .into('test')
    .then(ids => {
      return ids[0];
    });

  const test = await database.select().from('test').where('id', id).first();

  const data = {
    id: test.id,
  };

  const message = {
    MessageBody: JSON.stringify(data),
    QueueUrl: config.services.aws.queueUrl,
  };
  
  try {
    await aws.sqs.sendMessage(message).promise();
  } catch (error) {
    logger.error('Could not send message to the queue!', error);
    return res.status(503).json({
      data: null,
      error: 'Could not send message to the queue!',
    });
  }

  res.json({
    data: {
      test: {
        ...test,
        isDone: test.isDone === 1,
      }
    },
  });
});

router.get('/run/:id', async (req, res) => {
  const test = await database.select().from('test').where('id', req.params.id).first();

  const pentest = new Pentest();
  const result = await pentest.run(test.url);

  const successCount = countStatuses(result.security, 'SUCCESS') + countStatuses(result.html, 'SUCCESS') + countStatuses(result.wordpress, 'SUCCESS');
  const warningCount = countStatuses(result.security, 'WARNING') + countStatuses(result.html, 'WARNING') + countStatuses(result.wordpress, 'WARNING');
  const errorCount = countStatuses(result.security, 'ERROR') + countStatuses(result.html, 'ERROR') + countStatuses(result.wordpress, 'ERROR');

  await database.table('test').update({ result: JSON.stringify(result), status: 'done', isDone: 1, successCount, warningCount, errorCount }).where('id', req.params.id);

  res.json({ data: result });
});

router.get('/:id', async (req, res) => {
  const test = await database.select().from('test').where('id', req.params.id).first();

  res.json({
    data: {
      test: {
        ...test,
        isDone: test.isDone === 1,
      }
    },
  });
});

router.get('/', async (req, res) => {
  const tests = await database.select('id', 'url', 'status', 'isDone', 'createdAt', 'successCount', 'warningCount', 'errorCount')
                              .from('test').where('isDone', 1).orderBy('id', 'desc').limit(10);

  res.json({
    data: {
      tests: tests,
    },
  });
});

export default router;
