import express from 'express';
import Pentest from 'pentest-tool-lite/src/Pentest';
import database from '../database';
import logger from '../logger';
import { getPentestQueue } from '../jobs/pentestQueue/pentestQueue';
import { isValidUrl } from '../utils/functions';

const router = express.Router();

router.post('/', async (req, res) => {
  const body = req.body;

  if (!('url' in body)) {
    return res.json({
      error: 'Field url is missing!',
    });
  }

  if (!isValidUrl(body.url)) {
    return res.json({
      error: 'URL is not valid!',
    });
  }

  logger.debug('New pentest requested!', { url: body.url });

  const count = await database.select().count({ count: '*' }).from('test').where('createdAt', '>=', database.raw('NOW() - INTERVAL 15 MINUTE')).first().then(result => result.count);

  if (count > 10) {
    logger.error('Queue is full!', { count });
    return res.json({
      error: 'Queue is full!',
    });
  }

  const id = await database.insert({
    url: body.url,
  })
    .into('test')
    .then(ids => {
      return ids[0];
    });

  const test = await database.select().from('test').where('id', id).first();

  getPentestQueue().add({
    id: test.id,
  }, {
    attempts: 1,
    removeOnFail: true,
    removeOnComplete: true,
  });

  res.json({
    data: {
      test: {
        ...test,
        isDone: test.isDone === 1,
      }
    },
  });
});

router.get('/run/:id', async (req, res) => {
  const test = await database.select().from('test').where('id', req.params.id).first();

  const pentest = new Pentest();
  const result = await pentest.run(test.url);

  await database.table('test').update({ result: JSON.stringify(result), status: 'done', isDone: 1 }).where('id', req.params.id);

  res.json({ data: result });
});

router.get('/:id', async (req, res) => {
  const test = await database.select().from('test').where('id', req.params.id).first();

  res.json({
    data: {
      test: {
        ...test,
        isDone: test.isDone === 1,
      }
    },
  });
});

export default router;
