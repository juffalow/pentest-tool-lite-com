import express from 'express';
import Pentest from 'pentest-tool-lite/src/Pentest';
import logger from '../logger';
import services from '../services';
import repositories from '../repositories';
import { isValidUrl, countStatuses } from '../utils/functions';

const router = express.Router();

router.post('/', async (req, res) => {
  const body = req.body;

  if (!('url' in body)) {
    return res.status(400).json({
      error: {
        message: 'Field URL is missing!',
      },
    });
  }

  if (!isValidUrl(body.url)) {
    return res.status(400).json({
      error: {
        message: 'URL address is not valid!',
      },
    });
  }

  logger.debug('New pentest requested!', { url: body.url });

  // if (count > 15) {
  //   logger.error('Queue is full!', { count });
  //   return res.status(400).json({
  //     error: {
  //       message: 'Cannot run more pentests! Please wait for a while and try again.',
  //     },
  //   });
  // }

  const item = await repositories.Test.create(body.url, 'running');

  const recentTests = await repositories.RecentTests.get();

  recentTests.unshift({
    id: item.id,
    url: item.url,
    status: item.status,
    successCount: 0,
    warningCount: 0,
    errorCount: 0,
  });

  if (recentTests.length > 10) recentTests.pop();

  await repositories.RecentTests.update(recentTests);

  const data = {
    id: item.id,
  };
  
  try {
    await services.Queue.sendMessage(data);
  } catch (error) {
    logger.error('Could not send message to the queue!', error);
    return res.status(503).json({
      data: null,
      error: 'Could not send message to the queue!',
    });
  }

  res.json({
    data: {
      test: item,
    },
  });
});

router.get('/run/:id', async (req, res) => {
  const test = await repositories.Test.get(req.params.id);

  const pentest = new Pentest();
  const result = await pentest.run(test.url);

  const successCount = countStatuses(result.security, 'SUCCESS') + countStatuses(result.html, 'SUCCESS') + countStatuses(result.wordpress, 'SUCCESS');
  const warningCount = countStatuses(result.security, 'WARNING') + countStatuses(result.html, 'WARNING') + countStatuses(result.wordpress, 'WARNING');
  const errorCount = countStatuses(result.security, 'ERROR') + countStatuses(result.html, 'ERROR') + countStatuses(result.wordpress, 'ERROR');

  await repositories.Test.update(req.params.id, 'done', result, successCount, warningCount, errorCount);

  res.json({ data: result });
});

router.get('/:id', async (req, res) => {
  const test = await repositories.Test.get(req.params.id);

  const recentTests = await repositories.RecentTests.get();

  const updatedRecentTests = recentTests.map(item => {
    if (item.id === test.id) {
      return {
        ...item,
        status: test.status,
        successCount: test.successCount,
        warningCount: test.warningCount,
        errorCount: test.errorCount,
      };
    }

    return item;
  });

  await repositories.RecentTests.update(updatedRecentTests);

  res.json({
    data: {
      test: {
        ...test,
        result: JSON.parse(test.result),
      }
    },
  });
});

router.get('/', async (req, res) => {            
  const recentTests = await repositories.RecentTests.get();

  res.json({
    data: {
      tests: recentTests,
    },
  });
});

export default router;
