name: Main

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - published

env:
  FRONTEND_PROJECT_NAME: pentest-tool-lite-com-frontend
  BACKEND_PROJECT_NAME: pentest-tool-lite-com-backend
  ORGANIZATION: juffalow

jobs:
  push_latest_backend:
    name: Push latest backend container
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Rename config
      run: |
        cd ./backend
        mv ./src/config.example.ts ./src/config.ts
    - name: Build
      run: |
        cd ./backend
        docker build -t $ORGANIZATION/$BACKEND_PROJECT_NAME .
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - name: Push image to Digital Ocean Container Registry
      run: |
        VERSION=latest
        
        docker tag $ORGANIZATION/$BACKEND_PROJECT_NAME registry.digitalocean.com/$ORGANIZATION/$BACKEND_PROJECT_NAME:$VERSION
        
        doctl auth init
        doctl registry login
        
        docker push registry.digitalocean.com/$ORGANIZATION/$BACKEND_PROJECT_NAME:$VERSION
  push_latest_frontend:
    name: Push latest frontend container
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Change API_URL to latest version
      run: |
        cd ./frontend
        echo "REACT_APP_API_URL=https://latest-api.pentest-tool-lite.com" > .env
    - name: Build
      run: |
        cd ./frontend
        docker build -t $ORGANIZATION/$FRONTEND_PROJECT_NAME .
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - name: Push image to Digital Ocean Container Registry
      run: |
        VERSION=latest
        
        docker tag $ORGANIZATION/$FRONTEND_PROJECT_NAME registry.digitalocean.com/$ORGANIZATION/$FRONTEND_PROJECT_NAME:$VERSION
        
        doctl auth init
        doctl registry login
        
        docker push registry.digitalocean.com/$ORGANIZATION/$FRONTEND_PROJECT_NAME:$VERSION
  deploy_latest_backend:
    needs: push_latest_backend
    name: Deploy backend to latest
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v2
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - name: Obtain kubernetes config
      env:
        cluster: ${{ secrets.DIGITALOCEAN_KUBERNETES_PRODUCTION }}
      run: doctl kubernetes cluster kubeconfig save $cluster
    - name: Deploy new version
      run: |
        VERSION=latest

        kubectl rollout restart deployment/latest-$BACKEND_PROJECT_NAME-deployment --namespace="tools"
  deploy_latest_frontend:
    needs: push_latest_frontend
    name: Deploy to latest
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v2
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - name: Obtain kubernetes config
      env:
        cluster: ${{ secrets.DIGITALOCEAN_KUBERNETES_PRODUCTION }}
      run: doctl kubernetes cluster kubeconfig save $cluster
    - name: Deploy new version
      run: |
        VERSION=latest

        kubectl rollout restart deployment/latest-$FRONTEND_PROJECT_NAME-deployment --namespace="tools"
  push_version_backend:
    name: Push container
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Rename config
      run: |
        cd ./backend
        mv ./src/config.example.ts ./src/config.ts
    - name: Build
      run: |
        cd ./backend
        docker build -t $ORGANIZATION/$BACKEND_PROJECT_NAME .
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - name: Push image to Digital Ocean Container Registry
      run: |
        VERSION=${GITHUB_REF#"refs/tags/"}
        
        docker tag $ORGANIZATION/$BACKEND_PROJECT_NAME registry.digitalocean.com/$ORGANIZATION/$BACKEND_PROJECT_NAME:$VERSION
        
        doctl auth init
        doctl registry login
        
        docker push registry.digitalocean.com/$ORGANIZATION/$BACKEND_PROJECT_NAME:$VERSION
  push_version_frontend:
    name: Push container
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set VERSION env variable
      id: version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
    - name: Change API_URL to latest version
      run: |
        cd ./frontend
        echo "REACT_APP_API_URL=https://api.pentest-tool-lite.com" > .env
        echo "PUBLIC_URL=https://static.juff.app/pentest-tool-lite/${{ steps.version.outputs.VERSION }}/" > .env
    - name: Build
      run: |
        cd ./frontend
        docker build -t $ORGANIZATION/$FRONTEND_PROJECT_NAME .
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - name: Push image to Digital Ocean Container Registry
      run: |
        VERSION=${GITHUB_REF#"refs/tags/"}
        
        docker tag $ORGANIZATION/$FRONTEND_PROJECT_NAME registry.digitalocean.com/$ORGANIZATION/$FRONTEND_PROJECT_NAME:$VERSION
        
        doctl auth init
        doctl registry login
        
        docker push registry.digitalocean.com/$ORGANIZATION/$FRONTEND_PROJECT_NAME:$VERSION
  push_version_cdn:
    name: Upload static files to CDN
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: 16
        cache: 'yarn'
        cache-dependency-path: './frontend/yarn.lock'
    - name: Set VERSION env variable
      id: version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
    - name: Change API_URL to latest version
      run: |
        cd ./frontend
        echo "REACT_APP_API_URL=https://api.pentest-tool-lite.com" > .env
        echo "PUBLIC_URL=https://static.juff.app/pentest-tool-lite/${{ steps.version.outputs.VERSION }}/" > .env
    - name: Install dependencies
      run: |
        cd ./frontend
        yarn install
    - name: Build
      run: |
        cd ./frontend
        yarn run build
    - uses: BetaHuhn/do-spaces-action@v2
      with:
        access_key: ${{ secrets.S3_STORAGE_KEY}}
        secret_key: ${{ secrets.S3_STORAGE_SECRET }}
        space_name: juff-static
        space_region: ${{ secrets.S3_STORAGE_REGION }}
        source: frontend/build
        out_dir: "pentest-tool-lite/${{ steps.version.outputs.VERSION }}"
        versioning: false
  deploy_prod_backend:
    needs: push_version_backend
    name: Deploy to prod
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v2
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - name: Obtain kubernetes config
      env:
        cluster: ${{ secrets.DIGITALOCEAN_KUBERNETES_PRODUCTION }}
      run: doctl kubernetes cluster kubeconfig save $cluster
    - name: Deploy new version
      run: |
        VERSION=${GITHUB_REF#"refs/tags/"}
        
        kubectl set image deployment/$BACKEND_PROJECT_NAME-deployment $BACKEND_PROJECT_NAME-application=registry.digitalocean.com/$ORGANIZATION/$BACKEND_PROJECT_NAME:$VERSION --namespace=tools
  deploy_prod_frontend:
    needs: push_version_frontend
    name: Deploy to prod
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v2
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - name: Obtain kubernetes config
      env:
        cluster: ${{ secrets.DIGITALOCEAN_KUBERNETES_PRODUCTION }}
      run: doctl kubernetes cluster kubeconfig save $cluster
    - name: Deploy new version
      run: |
        VERSION=${GITHUB_REF#"refs/tags/"}
        
        kubectl set image deployment/$FRONTEND_PROJECT_NAME-deployment $FRONTEND_PROJECT_NAME-application=registry.digitalocean.com/$ORGANIZATION/$FRONTEND_PROJECT_NAME:$VERSION --namespace=tools